# -*- coding: utf-8 -*-
"""Disease Prediction from Medical data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F1lIGhp0eqf25GTYX0T9ohhwjCAHcvPn
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score


url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
cols = ["age","sex","cp","trestbps","chol","fbs","restecg","thalach","exang","oldpeak","slope","ca","thal","target"]
df = pd.read_csv(url, names=cols, na_values="?")


df.dropna(inplace=True)
df["target"] = df["target"].apply(lambda x: 1 if x > 0 else 0)  # 1 = has disease

X = df.drop("target", axis=1)
y = df["target"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


def evaluate(model, name):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f"\n🔍 {name} Evaluation")
    print("Accuracy: ", round(accuracy_score(y_test, y_pred), 2))
    print("Precision:", round(precision_score(y_test, y_pred), 2))
    print("Recall:   ", round(recall_score(y_test, y_pred), 2))
    print("F1 Score: ", round(f1_score(y_test, y_pred), 2))
    print("AUC:      ", round(roc_auc_score(y_test, y_pred), 2))
    return model, y_pred


lr_model, lr_pred   = evaluate(LogisticRegression(), "Logistic Regression")
svm_model, svm_pred = evaluate(SVC(probability=True), "SVM")
rf_model, rf_pred   = evaluate(RandomForestClassifier(n_estimators=100, random_state=42), "Random Forest")
xgb_model, xgb_pred = evaluate(XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42), "XGBoost")


print("\n📋 Random Forest Predictions (First 10)")
rf_results = pd.DataFrame(X_test, columns=X.columns)
rf_results['Actual Disease (1=Yes)'] = y_test.values
rf_results['Predicted (RF)'] = rf_pred
print(rf_results.head(10))


print("\n👤 Predicting for new patient:")
# Example patient: [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]
new_patient = np.array([[60, 1, 2, 140, 250, 0, 1, 150, 0, 1.0, 1, 0, 2]])
new_patient_scaled = scaler.transform(new_patient)
new_pred = rf_model.predict(new_patient_scaled)
print("Prediction:", "💔 Heart Disease Detected" if new_pred[0]==1 else "💚 No Heart Disease")